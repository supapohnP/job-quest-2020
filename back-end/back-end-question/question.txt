Back-end Questions
1.
Explain First-party cookie & Third-party cookie
ตอบ
First-party cookies คือ ไฟล์คุกกี้ที่เจ้าของเว็บไซต์ส่งไปยังคอมพิวเตอร์ของเราโดยตรง จะถูกสร้างและบันทึกข้อมูลของเว็บที่เราเข้าถึง ถูกใช้เพื่อจดจำคอมพิวเตอร์ของเราเมื่อเราเข้าไปเยี่ยมชมที่เว็บไซต์นั้นอีกครั้ง โดยการตั้งค่าก็จะยังเหมือนที่เราเคยตั้งค่าไว้
Third-party cookies คือ ไฟล์คุกกี้ที่ถูกสร้างและบันทึกข้อมูลโดยผู้ให้บริการของเว็บไซต์ โดยเจ้าของเว็บไซต์สามารถใช้คุกกี้เหล่านี้เพื่อจดจำคอมพิวเตอร์ของเราเมื่อเข้าไปเว็บไซต์อื่นๆ ซึ่งใช้เพื่อการวิเคราะห์เว็บไซต์ หรือเพื่อการโฆษณา

2.
Explain CAP Theorem.
ตอบ 
ทฤษฎี CAP คือระบบที่เป็น distributed database จะมีคุณสมบัติได้เพียง 2 อย่าง จากทั้งหมด 3 อย่างเท่านั้น จะไม่สามารถเลือกทั้งหมดได้พร้อมๆ กัน ณ เวลาใดเวลาหนึ่ง ซึ่งแต่ละคุณสมบัติมีรายละเอียดดังนี้
Consistency (C) ความตรงกันของข้อมูล 
ทุก node จะเห็นข้อมูลเดียวกันในเวลาเดียวกัน ทุกครั้งที่เราอ่านข้อมูลจาก database จะได้ข้อมูลที่ตรงกันเสมอ ข้อมูลจะมีสองสถานะคือถูกกับไม่ถูก
Availability (A) ความพร้อมใช้งานของข้อมูล
ผู้ใช้งานสามารถ อ่านหรือเขียนข้อมูล ลงบน database ได้เสมอ
Partition Tolerance (P) ความทนทานต่อการถูกตัดเครือข่าย 
การที่ระบบทำงานต่อไปได้แม้ว่ามี node ใด node หนึ่งใน distributed database แม้เส้นทางการเชื่อมต่อถูกตัดขาดการติดต่อหรือล่มอยู่ แต่ client จะยังเข้าถึงได้อยู่

3.
Considering two queries
const searchIds = ['1', '2', '3', ...];
const query1 = await Product.find({ id: { $in: searchIds } });
const query2 = await Promise.all(searchIds.map(searchId => Product.find({ id: searchId })));
Which one is faster.
ตอบ query2

4.
Explain XSS / SQL Injection / Man in the Middle Attack, and how to prevent each attack type.
ตอบ
การโจมตีแบบ XSS
	Cross-site scripting (XSS) คือช่องโหว่ในคอมพิวเตอร์ชนิดหนึ่งที่มักพบใน web application โดย hacker สามารถส่งโค้ดคำสั่งเข้าไปในหน้าเว็บที่ผู้ใช้เว็บคนอื่น ๆ เปิดดูได้ เป็นการขโมยข้อมูลสำคัญของผู้ใช้งานคนอื่น ส่วนใหญ่คือขโมย web cookie ของผู้ใช้งานคนอื่นมาเพื่อใช้ในการแย่ง session ของเหยื่อได้ หรือเป็นการเปิดโอกาสให้เข้าควบคุม user account ของผู้ที่ถูกขโมย

วิธีการป้องกันการโจมตีแบบ XSS
- การไม่นำข้อมูลที่ได้รับมาจากผู้ใช้งานมาแสดงผลใน tag ที่เปิดโอกาสให้เรียกใช้งาน JavaScript ขึ้นได้
- การคัดกรองข้อมูลก่อนนำไปแสดงผล เพื่อให้มันใจว่าข้อมูลที่ได้รับมาไม่มี JavaScript ฝังอยู่ เรียกวิธีการนี้ว่า data sanitizing เป็นการตัด keyword หรือ tag ออก และ HTML escaping เป็นการ encode อักขระพิเศษให้อยู่ใน format ของ HTML encode
- หากต้องการใส่ข้อมูลลงใน tag ก็ต้องทำ JavaScript, Attribute, และ CSS escpaing เพื่อให้แน่ใจว่า ข้อมูลที่ได้รับจากผู้ใช้งานจะไม่สามารถเรียกใช้งาน JavaScript ได้

การโจมตีแบบ SQL Injection
	คือวิธีการที่ถูกนำมาใช้ในการเจาะระบบด้วยช่องโหว่ทางการเขียนโปรแกรมรวมกับคำสั่งของ SQL ที่ส่งไปประมวลผล โดยเป็นการใส่คําสั่งหรือแฝงคําสั่ง SQL เข้าไปในส่วนของข้อมูล HTTP request
เพื่อที่จะส่งคำสั่งจากผู้ใช้ไปยัง HTTP Server เพื่อทําการ query, insert, update, delete
หรืออื่นๆ เพื่อกระทํากับฐานข้อมูลหรือระบบการทํางานของ Server ตามแต่ความสามารถของคําสั่ง SQL จะไปถึง และตามช่องโหว่ของการเขียนโปรแกรม 
SQL Injection ยังสามารถนำไปประยุกต์ได้อีกหลายรูปแบบ ไม่ว่าจะเป็นการพยายามใส่ข้อมูล SQL ให้ผิดพลาดเพื่อให้ฐานข้อมูลแสดง error ออกมา โดย error นั้นก็จะให้ข้อมูลเกี่ยวกับ table และ column ใน SQL statement เพื่อให้ผู้โจมตีนำไปวิเคราะห์และสร้าง SQL statement ในการโจมตีได้ดียิ่งขึ้น

วิธีการป้องกันการโจมตีแบบ SQL Injection
- ใช้ Prepared Statement และไม่รับ user input เข้ามาในส่วนของ command สำหรับ query. เรียกใช้เฉพาะ command, query ที่ hardcoded มาในโปรแกรมเท่านั้น
- ในการเอาค่าที่รับมาจากผู้ใช้ไปรวมเป็น query จะต้อง escape ค่าที่รับมาจากผู้ใช้ด้วยฟังก์ชั่นที่เหมาะสมตามชนิดของแต่ละ database ก่อนที่จะนำไปใช้
- ใช้ escape character โดยหน้าที่ของการ escape คือการแยกระหว่าง data กับ command
- เลือก alternative way ในการเรียกใช้ function บางอย่างในการทำงาน ได้แก่ การเปลี่ยนจากการเรียก shell execute มาเรียกใช้ function/library ที่ภาษาตัวเองมี

การโจมตีแบบ Man in the Middle
	เป็นกระบวนการดักฟังเว็บเข้ารหัสคือ หากมีผู้โจมตีไปคั่นกลางปลอมตัวเป็นอีกคนและหลอกว่าทั้งสองกำลังเชื่อมต่อกันโดยตรง เช่นมีการแลกกุญแจเข้ารหัสหรือ session key กันกับเครื่องที่คั่นกลาง เครื่องที่คั่นกลางก็จะสามารถอ่านข้อความได้ทั้งหมด หรือมาเปลี่ยนแปลงข้อมูลที่ทั้ง 2 ฝั่งสื่อสารกันอยู่ เนื่องจากไม่มีสิ่งมาพิสูจน์ว่า public key นั้นมาจากใครในสองคนนั้น

วิธีการป้องกันการโจมตีแบบ Man in the Middle
- หลีกเลี่ยงการใช้เครือข่ายสาธารณะและเครือข่ายเปิด
- เลือกเข้าใช้งาน HTTPS ซึ่งเป็นเว็บไซต์ที่เข้ารหัสแล้ว
- ใช้บริการ VPN
- ปกป้องบัญชีของเรา โดยใช้รหัสผ่านที่แข็งแกร่งและซับซ้อน ใช้การตรวจสอบสิทธิ์แบบสองขั้นตอนเพื่อป้องกันไม่ให้ผู้อื่นเข้าถึง
- กรณีที่ต้องการส่งข้อมูลที่เป็นความลับผ่านทางอีเมล ควรทำการเข้ารหัสลับข้อมูลก่อนที่จะส่งออกไป
- อัปเดตระบบและแอปพลิเคชันเสมอ
- หมั่นปรับปรุงโปรแกรมตรวจจับไวรัสและไม่ติดตั้งโปรแกรมที่น่าสงสัย


3.Explain the different between using callback / Promise / async await. When to use and when not to.
ตอบ
Callback 
การใช้งานของ callback function เป็นฟังก์ชันที่ถูกส่ง parameter ของฟังก์ชันอื่นเพื่อมาเรียกใช้งานได้ในภายหลัง เป็นการทำงานแบบ asynchronous คือจะทำคำสั่งถัดไปทันทีเลยโดยไม่ได้รอให้คำสั่งก่อนหน้าทำเสร็จ ซึ่ง callback จะถูกเรียกหลังฟังก์ชันอื่นทำงานเสร็จแล้ว โดยการสร้าง callback function จะเป็นการส่งไปเป็น parameter ให้กับ function อื่น จากนั้นจึงเรียกใช้หลังจากที่มี task การทำงานบางอย่างเสร็จสมบูรณ์

Promise
	เป็น object ที่ทำหน้าที่เก็บผลการทำงานของ Asynchronous operation ต่างๆ เก็บข้อมูลพวกสถานะการทำงาน และจะแจ้งให้ทราบเมื่อทำงานสำเร็จหรือผิดพลาด เมื่อเริ่มต้นทำคำสั่ง promise จะมีสถานะเป็น pending ถ้าทำเสร็จแล้วจะมีสถานะเป็น resolved โดยจะทำคำสั่งถัดไปที่อยู่ใน .then() และถ้าทำคำสั่งไม่สำเร็จ จะมีสถานะเป็น rejected และจะไม่ทำคำสั่งถัดไป แต่จะทำคำสั่งที่อยู่ใน .catch() แทน
ปัญหาของ promise คือการดักจับ error ซึ่งใช้ .catch ไว้ดักจับ error แต่จะไม่สามารถ .then ต่อจาก .catch ได้ ทำให้เวลามี error เข้า .catch จะไม่รู้เลยว่ามาจาก promise ตัวไหนใน chain
ส่วนข้อดีคือไม่มี callback hell และเวลาที่จะ handle error ก็ไม่ต้องทำที่ละจุดใน callback
	
async await
	syntax ของ async await เป็นเหมือนกับการเขียน Synchronous action ซึ่งคือการที่คำสั่งใด ๆ หยุดรอจนกว่าคำสั่งจะเสร็จสมบูรณ์
	async ใช้เพื่อประกาศว่า function นี้เป็นแบบ Asynchronous function
	await ใช้เพื่อบอกให้ JavaScript รอจนกว่าคำสั่งนั้นจะเสร็จ ถึงค่อยไปทำงานอันอื่นต่อไป และทำงานร่วมกับ promise ได้แต่ใช้งานร่วมกับ callback ไม่ได้
	ข้อดีของ async await คือการ debug จะง่ายขึ้นเพราะจำนวนที่จะใช้ callback ลดลง และการเปลี่ยนโค้ดจาก Promise .then หรือ .catch ก็จะสะดวก maintain ได้ง่ายขึ้น

Explain how HTTP protocol works.
ตอบ
HTTP (Hypertext Transfer Protocol) เป็นรูปแบบสื่อสารในการรับส่งข้อมูลผ่าน Internet หรือเป็นกลไกมาตราฐานในการแลกเปลี่ยนข้อมูลผ่านทาง Internet ในระบบ www (World Wide Web) โดยมีโปรแกรม เว็บบราวเซอร์ (Web Browser) และ เว็บเซอร์เวอร์ (Web Sever) เป็นตัวกลาง โดยการส่งจาก Client ไป Server เรียกว่า HTTP Request ส่วนข้อมูลที่ Server ตอบกลับมาที่ Client เรียกว่า HTTP Response
การทำงานของ HTTP protocol คือ
1.เริ่มต้น สร้างการเชื่อมต่อระหว่าง Web Browser กับ Web Server
2.หลังจากเชื่อมต่อได้แล้ว Web Browser จะ ร้องขอ ข้อมูลไปยัง Web Server
3.Web Server จะส่งข้อมูลตามที่ร้องขอ มายัง Web Browser (แสดงผลหน้าเว็บที่เราเรียกใช้งาน)
4.ยุติการเชื่อมต่อระหว่าง Web Browser กับ Web Server

